CON                                _CLKMODE = XTAL1 + PLL16X  _CLKFREQ = 80_000_000  ReleaseDecay = 500                                  'This sets the amount of decay delay there is after releasing a button                                                      ' ... helps with hysteresis ; button press detection         VAR  long  Temp, TempResult, Diff, OldDiff, Flag1, Flag2, Results, OldResults   PUB Start    cognew(@Entry, @Results)PUB State       Temp := Results                                   'Read Buttons                                                            'Note - read buttons only once.  Any further processing                                                      '       should be done from the 'Temp' variable.     if (Temp ^ OldResults)<> 0                        'Change indicates a 'new' button press       Flag1 := ReleaseDecay                          'Set button Release decay to maximum value    else       Flag1 -= 1 #> 0                                'Allow button to decay if no new buttons are pressed ; minimum Zero value    if Flag1 == ReleaseDecay and Flag2 == 0           'Add hysteresis to the detected button press.        Flag2 := 1                                     '  - The added hysteresis acts like a debounce    if Flag1 == 0       Flag2 := 0             if OldResults <> Temp       Diff := (Temp ^ OldResults)                    'Detect 'new' buttons pressed and set Diff to indicate changes       OldResults := Temp    if OldDiff <> Diff and Flag2 == 1       TempResult ^= Diff                             'Update LEDs and update 'only' the changes by XORing the Diff       OldDiff := Diff    if Flag2 == 0                                     'Do this to allow the same or last button pressed to be toggled On/Off        OldDiff := 0       Result := TempResultDAT''Note:   Since this COG is not using either of the counters, phsa,phsb,frqa, and frqb are used as temp variables.Entry   org                     ADC_Start        mov             frqb,                   #8                      'Set Decrement register to 8                     ADC_Repeat        call                                    #ADC_core               'Run ADC Core        djnz            frqb,                   #ADC_Repeat        shr             Mask,                   #8                      'Reset Mask to it's starting state        wrlong          phsa,                   par        jmp                                     #ADC_Start'------------------------------------------------------------------------------------------------------------------        ADC_core        andn            dira,                   Mask                    'Set Mask pin to INPUT        mov             Counter,                #0                      ''Clear ADC counter        mov             phsb,                   #2                      'Set Decrement register to 2ADC_run and             Mask,                   ina     nr, wc          'Read INPUT pin into 'C' flag        muxnc           outa,                   Mask                    'Preset pin to opposite state that was read  if_c  add             Counter,                #1                      ''Increment ADC counter'------------------------------------------------------------------------------------------------------------------          or              dira,                   Mask                    'Briefly make pin an OUTPUT with preset value.        andn            dira,                   Mask                    'This acts like a small 'step' charger '------------------------------------------------------------------------------------------------------------------                mov             frqa,                   BigDelay                'Set Decrement register to BigDelay value        djnz            frqa,                   #$                      'Allow pin to 'discharge' through 100k resistor                                                                        'and your finger to Ground.'------------------------------------------------------------------------------------------------------------------                djnz            phsb,                   #ADC_run                'Only do this twice ; If no discharge takes place                                                                        'then then ADC will only have a value of '1' otherwise                                                                        'the value in the ADC counter will be '2'.'----------------------------------------------------------------------------------------------------------------                                                                                cmp             Counter,                #1 wc                   'Compare the ADC value to determine if discharging        muxc            phsa,                   Mask                    'on the input Pin occurred, and update the 'phsa' to         shl             Mask,                   #1                      'reflect the condition.'------------------------------------------------------------------------------------------------------------------        ADC_core_ret        ret        Mask          long              |<0                                     'Initial Pin to Mask ;                                                Counter       long              0BigDelay      long              2000                                    'This value allows you to discharge the I/O through                                                                        'the built in 100k resistors. 